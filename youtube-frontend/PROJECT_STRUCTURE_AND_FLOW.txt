# Project Structure and Component Hierarchy (youtube-frontend)

## 1. File/Folder Structure

- public/
- src/
  - api/
    - api.js
  - assets/
    - login-illustration.png
    - react.svg
    - user.png
  - components/
    - VideoCard.jsx
    - VideoGrid.jsx
    - header/
      - BurgerMenu.jsx
      - ChannelModal.jsx
      - CreateOrMyChannelButton.jsx
      - Logo.jsx
      - Navbar.jsx
      - ProfileButton.jsx
      - SearchBar.jsx
      - SearchModal.jsx
      - SearchToggle.jsx
      - ThemeToggle.jsx
    - loginPage/
      - LoginForm.jsx
      - LoginIllustration.jsx
    - sidebar/
      - HomeSidebar.jsx
      - Sidebar.jsx
      - SidebarMenu.jsx
    - videoPlayer/
      - Comments.jsx
      - SuggestedVideos.jsx
  - context/
    - UserContext.jsx
    - VideoContext.jsx
  - layouts/
    - MainLayout.jsx
  - pages/
    - ChannelPage.jsx
    - HomePage.jsx
    - LoginPage.jsx
    - SignupPage.jsx
    - VideoPlayer.jsx
  - utils/
    - FormatNumber.jsx
    - GoogleLoginButton.jsx
  - App.jsx
  - App.css
  - index.css
  - main.jsx

## 2. Component & Page Hierarchy

- App.jsx
  - MainLayout (for all main routes)
    - Header (Navbar, Logo, SearchBar, etc.)
    - Sidebar (Sidebar, HomeSidebar, SidebarMenu)
    - Outlet (renders current page)
      - HomePage
        - VideoGrid
          - VideoCard
      - ChannelPage
        - VideoGrid
          - VideoCard
      - VideoPlayer
        - Comments
        - SuggestedVideos
      - LoginPage
        - LoginForm
        - LoginIllustration
      - SignupPage

## 3. Context Flow (Current & Proposed)

### Current State
- ChannelPage and possibly other components read user/channel data directly from localStorage.

### Proposed State (with UserContext)
- UserContext provides user/channel data and state management.
- All components/pages (e.g., ChannelPage, VideoGrid, VideoCard, etc.) consume user/channel data via UserContext instead of localStorage.
- Updates to user/channel state are made through UserContext provider methods, which can also sync with localStorage if needed.

## 4. Data Flow Example (with UserContext)

- App.jsx
  - Wraps app with <UserContext.Provider>
    - MainLayout, Pages, Components can use useContext(UserContext) to access user/channel state
    - Example: ChannelPage gets channel info from UserContext, not localStorage

## 5. Relationships

- VideoGrid renders multiple VideoCard components.
- ChannelPage, HomePage, etc. use VideoGrid.
- MainLayout provides layout for all main pages.
- Header and Sidebar are present on all main pages.
- UserContext and VideoContext provide global state for user and video data.

---

**Summary:**
- Move all user/channel state from localStorage to UserContext.
- All components/pages should use UserContext for user/channel data.
- The hierarchy is: App.jsx > MainLayout > Header/Sidebar/Outlet > Pages > Components.
- VideoGrid/VideoCard are reused in multiple pages.
- Contexts are in `src/context/` and should be the single source of truth for user/channel state.
